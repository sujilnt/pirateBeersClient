/* tslint:disable */
/* eslint-disable */
/**
 * Pirate Beers
 * A ecommerce app that sells beers
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Category,
    CategoryFromJSON,
    CategoryToJSON,
    Product,
    ProductFromJSON,
    ProductToJSON,
} from '../models';

export interface AddProductRequest {
    product?: Product;
}

export interface DeleteProductsByIdsRequest {
    ids: Array<string>;
}

export interface GetCategoryByIdRequest {
    id: string;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Adding a product to a particular category
     * Adding a product to a particular category
     */
    async addProductRaw(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adding a product to a particular category
     * Adding a product to a particular category
     */
    async addProduct(requestParameters: AddProductRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.addProductRaw(requestParameters, initOverrides);
    }

    /**
     * Deleting products based on product Ids
     * Deleting products based on product Ids
     */
    async deleteProductsByIdsRaw(requestParameters: DeleteProductsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling deleteProductsByIds.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deleting products based on product Ids
     * Deleting products based on product Ids
     */
    async deleteProductsByIds(requestParameters: DeleteProductsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteProductsByIdsRaw(requestParameters, initOverrides);
    }

    /**
     * Gets all product categories
     * Gets all product categories
     */
    async getAllProductCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Category>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     * Gets all product categories
     * Gets all product categories
     */
    async getAllProductCategories(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Category>> {
        const response = await this.getAllProductCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets all products
     * Gets all products
     */
    async getAllProductsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Gets all products
     * Gets all products
     */
    async getAllProducts(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Product>> {
        const response = await this.getAllProductsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get category information of a particular category
     * Get category information of a particular category
     */
    async getCategoryByIdRaw(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Category>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCategoryById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     * Get category information of a particular category
     * Get category information of a particular category
     */
    async getCategoryById(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Category>> {
        const response = await this.getCategoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
